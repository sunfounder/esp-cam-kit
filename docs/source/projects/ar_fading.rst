 .. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Vertiefen Sie sich mit anderen Enthusiasten in die Welt von Raspberry Pi, Arduino und ESP32.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Sonderangebote**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_fading:

2.2 Analoge Ausgabe √ºber PWM
=================================

Im vorherigen Projekt haben wir die LED durch Ein- und Ausschalten mithilfe eines digitalen Ausgangs gesteuert. In diesem Projekt werden wir einen Atemeffekt auf der LED erzeugen, indem wir die Pulsweitenmodulation (PWM) verwenden. PWM ist eine Technik, die es uns erm√∂glicht, die Helligkeit einer LED oder die Geschwindigkeit eines Motors zu steuern, indem wir das Tastverh√§ltnis eines Rechtecksignals variieren.

Mit PWM werden wir anstelle des einfachen Ein- und Ausschaltens der LED die Zeit, in der die LED an ist, gegen√ºber der Zeit, in der sie aus ist, innerhalb jedes Zyklus anpassen. Durch schnelles Ein- und Ausschalten der LED in variierenden Intervallen k√∂nnen wir die Illusion erzeugen, dass die LED allm√§hlich heller und dunkler wird, was einen Atemeffekt simuliert.

Durch die Nutzung der PWM-Funktionen des ESP32 WROOM 32E k√∂nnen wir eine reibungslose und pr√§zise Steuerung der LED-Helligkeit erreichen. Dieser Atemeffekt f√ºgt Ihren Projekten ein dynamisches und visuell ansprechendes Element hinzu und schafft ein auff√§lliges Display oder Ambiente.

**Verf√ºgbare Pins**

Hier ist eine Liste der verf√ºgbaren Pins auf dem ESP32-Board f√ºr dieses Projekt.

.. list-table::
    :widths: 5 20 

    * - Verf√ºgbare Pins
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23



**Ben√∂tigte Komponenten**

In diesem Projekt ben√∂tigen wir die folgenden Komponenten.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTEN-BESCHREIBUNG
        - KAUFLINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - Breadboard
        - |link_breadboard_buy|
    *   - Mehrere Verbindungskabel
        - |link_wires_buy|
    *   - Widerstand
        - |link_resistor_buy|
    *   - LED
        - |link_led_buy|

**Schaltplan**

.. image:: img/circuit_2.1_led.png

Dieses Projekt verwendet denselben Schaltkreis wie das erste Projekt :ref:`ar_blink`, aber der Signaltyp ist unterschiedlich. Im ersten Projekt wird ein digitales High- und Low-Signal (0&1) direkt von Pin 26 ausgegeben, um die LED ein- oder auszuschalten. In diesem Projekt wird ein PWM-Signal von Pin 26 ausgegeben, um die Helligkeit der LED zu steuern.

**Verdrahtung**

.. image:: img/2.1_hello_led_bb.png

**Code**

#. Laden Sie diesen Code herunter oder kopieren Sie ihn direkt in die Arduino IDE.
    
.. note::
    
    * :ref:`unknown_com_port`

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/aa898b09-be86-473b-9bfe-317556c696bb/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Nachdem der Code erfolgreich hochgeladen wurde, k√∂nnen Sie sehen, wie die LED atmet.

**Wie es funktioniert**

#. Konstanten und Variablen definieren.

    .. code-block:: arduino

        const int ledPin = 26; // Der GPIO-Pin f√ºr die LED
        int brightness = 0;
        int fadeAmount = 5;
   
    * ``ledPin``: Die GPIO-Pin-Nummer, an der die LED angeschlossen ist (in diesem Fall GPIO 26).
    * ``brightness``: Der aktuelle Helligkeitsgrad der LED (initial auf 0 gesetzt).
    * ``fadeAmount``: Der Betrag, um den sich die Helligkeit der LED bei jedem Schritt √§ndert (auf 5 gesetzt).

#. Konfigurieren des LED-Pins.

    .. code-block:: arduino

        void setup() {
            ledcSetup(ledPin, 5000, 8); // Konfigurieren des PWM-Kanals (0) mit 5000Hz Frequenz und 8-Bit-Aufl√∂sung
        }

    Hier verwenden wir das |link_ledc| (LED Control)-Peripherieger√§t, das haupts√§chlich zur Steuerung der Helligkeit von LEDs entwickelt wurde, aber auch zur Erzeugung von PWM-Signalen f√ºr andere Zwecke verwendet werden kann.

    * ``bool ledcAttach(uint8_t pin, uint32_t freq, uint8_t resolution_bits);``: Diese Funktion wird verwendet, um die LEDC-Pins-Frequenz und -Aufl√∂sung einzustellen. Sie gibt die ``Frequenz`` zur√ºck, die f√ºr den LEDC-Pins konfiguriert wurde. Wenn 0 zur√ºckgegeben wird, ist ein Fehler aufgetreten und der LEDC-Pins wurde nicht konfiguriert.
            
        * ``pin``: W√§hlt den GPIO-Pin aus.
        * ``freq``: W√§hlt die PWM-Frequenz aus.
        * ``resolution_bits``: W√§hlt die Aufl√∂sung f√ºr den LEDC-Pins aus. Der Bereich liegt zwischen 1-14 Bit (1-20 Bit f√ºr ESP32).


#. Die Funktion ``loop()`` enth√§lt die Hauptlogik des Programms und l√§uft kontinuierlich. Sie aktualisiert die Helligkeit der LED, invertiert die Fade-Menge, wenn die Helligkeit den Mindest- oder H√∂chstwert erreicht, und f√ºgt eine Verz√∂gerung ein.

    .. code-block:: arduino

        void loop() {
            ledcWrite(ledPin, brightness); // Schreiben des neuen Helligkeitswerts auf den PWM-Pins
            brightness = brightness + fadeAmount;

            if (brightness <= 0 || brightness >= 255) {
                fadeAmount = -fadeAmount;
            }
            
            delay(50); // Warten f√ºr 20 Millisekunden
            }

    * ``void ledcWrite(uint8_t pin, uint32_t duty);``: Diese Funktion wird verwendet, um die Duty-Cycle f√ºr den LEDC-Pins einzustellen.
        
        * ``pin``: W√§hlt den LEDC-Pins f√ºr die Duty-Cycle-Einstellung aus.
        * ``duty``: W√§hlt die Duty-Cycle aus, die f√ºr den ausgew√§hlten Pins eingestellt werden soll.
