 .. note::

    こんにちは、SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts CommunityのFacebookページへようこそ！Raspberry Pi、Arduino、ESP32について、他の愛好者と一緒に深く掘り下げましょう。

    **なぜ参加するのか？**

    - **専門家サポート**: 購入後の問題や技術的な課題をコミュニティやチームの助けを借りて解決します。
    - **学びと共有**: スキルを向上させるためのヒントやチュートリアルを交換しましょう。
    - **独占プレビュー**: 新製品の発表やプレビューにいち早くアクセスできます。
    - **特別割引**: 最新の製品に対する独占割引を楽しめます。
    - **フェスティブプロモーションとギブアウェイ**: プレゼントやホリデープロモーションに参加できます。

    👉 私たちと一緒に探求し、創造する準備ができましたか？クリックして今日参加してください！ [|link_sf_facebook|]

.. _ar_button:

2.3 デジタル入力
=========================

このインタラクティブなプロジェクトでは、ボタン操作を通じてLEDを制御するデジタル入力の使用方法を探ります。この操作はシンプルですが強力です。ボタンの状態を監視し、押されたときに高電圧レベル（「ハイステート」として知られる）を登録します。この状態変化がLEDを点灯させるトリガーとなります。このデジタル入力の読み取りを学ぶことで、マイクロコントローラーが外部デバイスとどのように相互作用できるかの基本を理解することができます。このプロジェクトは基本的な電子工学の概念を紹介するだけでなく、複数の入力および出力を含むより複雑な制御システムへのステップともなります。

**利用可能なピン**

* **利用可能なピン**

    ここでは、このプロジェクトに使用するESP32ボードの利用可能なピンのリストを示します。

    .. list-table::
        :widths: 5 20

        *   - 入力用
            - IO14, IO25, I35, I34, I39, I36, IO18, IO19, IO21, IO22, IO23
        *   - 出力用
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23
    
* **条件付き使用ピン（入力）**

    以下のピンには内蔵のプルアップまたはプルダウン抵抗があるため、 **入力ピンとして使用する場合** には外部抵抗は必要ありません。

    .. list-table::
        :widths: 5 15
        :header-rows: 1

        *   - 条件付き使用ピン
            - 説明
        *   - IO13, IO15, IO2, IO4
            - 47Kの抵抗でプルアップするとデフォルトで高値になります。
        *   - IO27, IO26, IO33
            - 4.7Kの抵抗でプルアップするとデフォルトで高値になります。
        *   - IO32
            - 1Kの抵抗でプルダウンするとデフォルトで低値になります。

* **ストラップピン（入力）**

    ストラップピンは、デバイスの起動時（電源オンリセット時）に特定のブートモードを決定するために使用される特別なピンセットです。
     
    .. list-table::
        :widths: 5 15

        *   - ストラップピン
            - IO5, IO0, IO2, IO12, IO15
    
    一般的には、これらのピンを**入力ピンとして使用することは推奨されません**。これらのピンを使用する場合は、ブートプロセスへの影響を考慮してください。詳細については、 :ref:`esp32_strapping` セクションを参照してください。

**必要なコンポーネント**

このプロジェクトでは、以下のコンポーネントが必要です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネント紹介
        - 購入リンク

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - ブレッドボード
        - |link_breadboard_buy|
    *   - いくつかのジャンプワイヤー
        - |link_wires_buy|
    *   - 抵抗
        - |link_resistor_buy|
    *   - LED
        - |link_led_buy|
    *   - ボタン
        - |link_button_buy|

**回路図**

.. image:: img/circuit_5.1_button.png

正常に機能するためには、ボタンの一方のピンを3.3Vに、もう一方のピンをIO14に接続します。ボタンを押すと、IO14がハイになり、LEDが点灯します。ボタンを離すと、IO14は浮動状態に戻り、ハイまたはローのどちらかになります。ボタンを押していないときに安定したロー状態を保つために、IO14を10Kのプルダウン抵抗を通じてGNDに接続します。

**配線図**

.. image:: img/5.1_button_bb.png

.. note::
    
    四ピンのボタンはH型に設計されています。ボタンを押していないときは、左右のピンは切断され、電流は流れません。しかし、ボタンを押すと、左右のピンが接続され、電流が流れる経路が作られます。

**コード**

|link_download_this_code|、Arduino IDEに直接コピーします。
    
.. note::
    
    * :ref:`unknown_com_port`
 
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/702c5a70-78e7-4a8b-a0c7-10c0acebfc12/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

シリアル通信のボーレートを115200に設定することを忘れないでください。

コードが正常にアップロードされると、ボタンを押すとLEDが点灯し、離すと消灯します。

同時に、右上隅のシリアルモニタを開いてボタンの値を観察することができます。ボタンを押すと「1」が表示され、それ以外の場合は「0」が表示されます。

.. image:: img/button_serial.png


**動作の仕組み**

前のプロジェクトはすべて、デジタル信号またはPWM信号の形式で信号を出力するものでした。

このプロジェクトでは、外部コンポーネントからESP32ボードへの入力信号を受信します。Arduino IDEのシリアルモニタを通じて入力信号を確認できます。


#. ``setup()`` 関数では、ボタンピンを ``input`` として、LEDピンを ``output`` として初期化します。また、シリアル通信を115200ボーの速度で開始します。

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);
            // ボタンピンを入力として初期化
            pinMode(buttonPin, INPUT);
            // LEDピンを出力として初期化
            pinMode(ledPin, OUTPUT);
        }
    
    * ``Serial.begin(speed)``: シリアルデータ送信のためのビット毎秒（ボー）でのデータレートを設定します。

        * ``speed``: ビット毎秒（ボー）での速度。許可されるデータ型: ``long``。

#. ``loop()`` 関数では、ボタンの状態を読み取り、変数 ``buttonState`` に保存します。 ``buttonState`` の値を ``Serial.println()`` を使用してシリアルモニタに出力します。

    .. code-block:: arduino

        void loop() {
            // ボタンの状態を読み取る
            buttonState = digitalRead(buttonPin);
            Serial.println(buttonState);
            delay(100);
            // ボタンが押されると、buttonStateはHIGHになります
            if (buttonState == HIGH) {
                // LEDを点灯
                digitalWrite(ledPin, HIGH);

            } else {
                // LEDを消灯
                digitalWrite(ledPin, LOW);
            }
        }

    ボタンが押されて ``buttonState`` がHIGHの場合、 ``ledPin`` をHIGHに設定してLEDを点灯させます。それ以外の場合はLEDを消灯します。

    * ``int digitalRead(uint8_t pin);``: 入力として設定されたピンの状態を読み取るために使用します。この関数は、選択されたピンの論理状態を ``HIGH`` または ``LOW`` として返します。

        * ``pin``: GPIOピンを選択します。

    * ``Serial.println()``: データをシリアルポートに人間が読めるASCIIテキストとして出力し、キャリッジリターン文字（ASCII 13, または '\r'）と改行文字（ASCII 10, または '\n'）を付加します。
