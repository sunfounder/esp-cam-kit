 .. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Vertiefen Sie sich mit anderen Enthusiasten in die Welt von Raspberry Pi, Arduino und ESP32.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Sonderangebote**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_potentiometer:

2.4 Analogeingang
==========================

In dieser Lektion untersuchen wir die Verwendung eines Potentiometers als Analogeingabeger√§t zur Anpassung der Helligkeit einer LED. Durch einfaches Drehen des Potentiometerknopfes k√∂nnen Sie die Lichtintensit√§t der LED variieren, √§hnlich wie Sie die Helligkeit einer Schreibtischlampe einstellen w√ºrden. Dieses einfache Setup zeigt den direkten Einfluss von Analogeingaben auf reale Anwendungen und bietet ein intuitives Verst√§ndnis daf√ºr, wie √Ñnderungen der Eingaben elektronische Komponenten steuern k√∂nnen.


**Verf√ºgbare Pins**

* **Verf√ºgbare Pins**

    Hier ist eine Liste der verf√ºgbaren Pins auf dem ESP32-Board f√ºr dieses Projekt.

    .. list-table::
        :widths: 5 15

        *   - Verf√ºgbare Pins
            - IO14, IO25, I35, I34, I39, I36

* **Strapping Pins**

    Die folgenden Pins sind Strapping Pins, die den Startvorgang des ESP32 beim Einschalten oder Zur√ºcksetzen beeinflussen. Sobald der ESP32 jedoch erfolgreich hochgefahren ist, k√∂nnen sie als normale Pins verwendet werden.

    .. list-table::
        :widths: 5 15

        *   - Strapping Pins
            - IO0, IO12


**Ben√∂tigte Komponenten**

In diesem Projekt ben√∂tigen wir die folgenden Komponenten.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTEN-BESCHREIBUNG
        - KAUFLINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - Steckbrett
        - |link_breadboard_buy|
    *   - Mehrere Verbindungskabel
        - |link_wires_buy|
    *   - Widerstand
        - |link_resistor_buy|
    *   - LED
        - |link_led_buy|
    *   - Potentiometer
        - |link_potentiometer_buy|



**Schaltplan**

.. image:: img/circuit_5.8_potentiometer.png

Wenn Sie das Potentiometer drehen, √§ndert sich der Wert von I35. Durch Programmierung k√∂nnen Sie den Wert von I35 verwenden, um die Helligkeit der LED zu steuern. Daher √§ndert sich die Helligkeit der LED entsprechend, wenn Sie das Potentiometer drehen.


**Verdrahtung**

.. image:: img/5.8_potentiometer_bb.png

**Code**

Laden Sie diesen Code herunter oder kopieren Sie ihn direkt in die Arduino IDE.

.. note::

    * :ref:`unknown_com_port`
   
.. raw:: html
     
    <iframe src=https://create.arduino.cc/editor/sunfounder01/aadce2e7-fd5d-4608-a557-f1e4d07ba795/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Nachdem der Code erfolgreich hochgeladen wurde, drehen Sie das Potentiometer und sehen, wie sich die Helligkeit der LED entsprechend √§ndert. Gleichzeitig k√∂nnen Sie die Analog- und Spannungswerte des Potentiometers im seriellen Monitor sehen.


**Wie funktioniert das?**

#. Definieren Sie Konstanten f√ºr Pin-Verbindungen und PWM-Einstellungen.

    .. code-block:: arduino

        const int potPin = 35; // Potentiometer an GPIO35 angeschlossen
        const int ledPin = 26; // LED an GPIO26 angeschlossen

        // PWM-Einstellungen
        const int freq = 5000; // PWM-Frequenz
        const int resolution = 12; // PWM-Aufl√∂sung (Bits)
        const int channel = 0; // PWM-Kanal

    Hier ist die PWM-Aufl√∂sung auf 12 Bit eingestellt und der Bereich liegt zwischen 0 und 4095.

#. Konfigurieren Sie das System in der ``setup()``-Funktion.

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);

            // PWM konfigurieren
            ledcAttach(ledPin, freq, resolution);
        }

    * In der ``setup()``-Funktion wird die serielle Kommunikation mit einer Baudrate von 115200 gestartet.
    * Die Funktion ``ledcAttach()`` wird aufgerufen, um den angegebenen LED-Pin mit der angegebenen Frequenz und Aufl√∂sung einzurichten.

#. Hauptschleife (wird wiederholt ausgef√ºhrt) in der ``loop()``-Funktion.

    .. code-block:: arduino

        void loop() {

            int potValue = analogRead(potPin); // den Wert des Potentiometers lesen
            uint32_t voltage_mV = analogReadMilliVolts(potPin); // die Spannung in Millivolt lesen
            
            ledcWrite(channel, potValue);
            
            Serial.print("Potentiometer Value: ");
            Serial.print(potValue);
            Serial.print(", Voltage: ");
            Serial.print(voltage_mV / 1000.0); // Convert millivolts to volts
            Serial.println(" V");
            
            delay(100);
        }

    * ``uint32_t analogReadMilliVolts(uint8_t pin);``: Diese Funktion wird verwendet, um den ADC-Wert f√ºr einen gegebenen Pin/ADC-Kanal in Millivolt zu erhalten.

        * ``pin``: GPIO-Pin zum Lesen des Analogwerts.

    Der Potentiometerwert wird direkt als PWM-Tastverh√§ltnis zur Steuerung der LED-Helligkeit √ºber die Funktion ``ledcWrite()`` verwendet, da der Wertebereich ebenfalls von 0 bis 4095 reicht.
