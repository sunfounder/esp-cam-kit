 .. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauchen Sie tiefer in Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie nach dem Kauf auftretende Probleme und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Sneak Peeks.
    - **Sonderrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu erkunden und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

.. _bluetooth_audio_player:

2.9 Bluetooth Player
==============================

Ziel dieses Projekts ist es, eine einfache L√∂sung zum Abspielen von Audio von einem Bluetooth-f√§higen Ger√§t √ºber den integrierten DAC des ESP32 bereitzustellen.

Das Projekt beinhaltet die Verwendung der ``ESP32-A2DP``-Bibliothek zum Empfangen von Audiodaten von einem Bluetooth-f√§higen Ger√§t. Die empfangenen Audiodaten werden dann √ºber die I2S-Schnittstelle an den internen DAC des ESP32 √ºbertragen. Die I2S-Schnittstelle ist so konfiguriert, dass sie im Master-Modus, √úbertragungsmodus und DAC-Built-in-Modus arbeitet. Die Audiodaten werden dann √ºber den an den DAC angeschlossenen Lautsprecher wiedergegeben.

Beim Einsatz des internen DAC des ESP32 ist zu beachten, dass das Ausgangsspannungsniveau auf 1,1 V begrenzt ist. Daher wird empfohlen, einen externen Verst√§rker zu verwenden, um das Ausgangsspannungsniveau auf das gew√ºnschte Niveau zu erh√∂hen. Es ist auch wichtig sicherzustellen, dass die Audiodaten im richtigen Format und mit der richtigen Abtastrate vorliegen, um Verzerrungen oder Rauschen w√§hrend der Wiedergabe zu vermeiden.

**Ben√∂tigte Komponenten**

In diesem Projekt ben√∂tigen wir die folgenden Komponenten. 



.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTEN√úBERSICHT
        - KAUFLINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - Steckbrett
        - |link_breadboard_buy|
    *   - Mehrere Jumperkabel
        - |link_wires_buy|
    *   - Widerstand
        - |link_resistor_buy|
    *   - Lautsprecher
        - \-


**Betriebsschritte**

#. Schalten Sie den Schaltkreis ein.

    Da dies ein Mono-Verst√§rker ist, k√∂nnen Sie IO25 mit dem L- oder R-Pin des Audioverst√§rkermoduls verbinden.

    Der 10K-Widerstand wird verwendet, um Hochfrequenzrauschen zu reduzieren und die Lautst√§rke zu verringern. Er bildet einen RC-Tiefpassfilter mit der parasit√§ren Kapazit√§t des DAC und des Audioverst√§rkers. Dieser Filter verringert die Amplitude von Hochfrequenzsignalen und reduziert so effektiv das Hochfrequenzrauschen. Das Hinzuf√ºgen des 10K-Widerstands macht die Musik weicher und beseitigt unerw√ºnschtes Hochfrequenzrauschen.

    Wenn die Musik auf Ihrer SD-Karte bereits leise ist, k√∂nnen Sie den Widerstand entfernen oder durch einen kleineren Wert ersetzen.

    .. image:: img/7.3_bluetooth_audio_player_bb.png

#. Laden Sie diesen Code herunter oder kopieren Sie ihn direkt in die Arduino IDE.

    .. note::
        
        * :ref:`unknown_com_port`
        * Die ``ESP32-A2DP``-Bibliothek wird hier verwendet. Weitere Informationen finden Sie unter :ref:`install_lib_man`.
        * :download:`ESP32-A2DP </_static/zip/ESP32-A2DP.zip>`

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/7bb7d6dd-72d4-4529-bb42-033b38558347/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        
#. W√§hlen Sie nach Auswahl der richtigen Platine und des richtigen Ports die Upload-Schaltfl√§che.

    * :ref:`unknown_com_port`

#. Sobald der Code erfolgreich hochgeladen wurde, schalten Sie das Bluetooth-f√§hige Ger√§t ein und suchen Sie nach verf√ºgbaren Ger√§ten. Verbinden Sie sich dann mit dem ``ESP32_Bluetooth``.

    .. image:: img/connect_bluetooth.png

#. Spielen Sie Audio auf dem Ger√§t ab und die Audiodaten sollten √ºber den mit dem ESP32 verbundenen Lautsprecher abgespielt werden.


**Code-Erkl√§rung**

#. Der Code beginnt mit der Einbindung der ``BluetoothA2DPSink.h``-Bibliothek, die zum Empfangen von Audiodaten von einem Bluetooth-f√§higen Ger√§t verwendet wird. Das ``BluetoothA2DPSink``-Objekt wird dann erstellt und mit den I2S-Schnittstelleneinstellungen konfiguriert. 

    .. code-block:: arduino

        #include "BluetoothA2DPSink.h"

        BluetoothA2DPSink a2dp_sink;


#. In der Setup-Funktion initialisiert der Code eine ``i2s_config_t struct`` mit der gew√ºnschten Konfiguration f√ºr die I2S (Inter-IC Sound)-Schnittstelle. 

    .. code-block:: arduino

        void setup() {
        const i2s_config_t i2s_config = {
            .mode = (i2s_mode_t) (I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN),
            .sample_rate = 44100, // corrected by info from bluetooth
            .bits_per_sample = (i2s_bits_per_sample_t) 16, // the DAC module will only take the 8bits from MSB
            .channel_format =  I2S_CHANNEL_FMT_RIGHT_LEFT,
            .communication_format = (i2s_comm_format_t)I2S_COMM_FORMAT_STAND_MSB,
            .intr_alloc_flags = 0, // default interrupt priority
            .dma_buf_count = 8,
            .dma_buf_len = 64,
            .use_apll = false
        };

        a2dp_sink.set_i2s_config(i2s_config);  
        a2dp_sink.start("ESP32_Bluetooth");  

        }

    * Die I2S-Schnittstelle wird verwendet, um digitale Audiodaten zwischen Ger√§ten zu √ºbertragen. 
    * Die Konfiguration umfasst den ``I2S-Modus``, die ``Abtastrate``, die ``Bits pro Sample``, das ``Kanalformat``, das ``Kommunikationsformat``, die ``Interrupt-Zuweisungsflags``, die ``DMA-Pufferanzahl``, die ``DMA-Pufferl√§nge`` und ob der APLL (Audio PLL) verwendet werden soll oder nicht.
    * Die ``i2s_config_t struct`` wird dann als Argument an die Funktion ``set_i2s_config`` des ``BluetoothA2DPSink``-Objekts √ºbergeben, um die I2S-Schnittstelle f√ºr die Audiowiedergabe zu konfigurieren.
    * Die ``start``-Funktion des ``BluetoothA2DPSink``-Objekts wird aufgerufen, um das Bluetooth-Audio-Sink zu starten und die Audiowiedergabe √ºber den eingebauten DAC zu beginnen.

